{
    "patches": [
        {
            "label": "2025-10-21_03-30-44",
            "content": "@@ -106,191 +106,29 @@\n ado%0A\n-        self.__bateria: Bateria %7C None = None%0A%0A    def ligar(self):%0A        if self.__bateria is None or self.__bateria.getCarga == 0:%0A            print('n%C3%A3o foi poss%C3%ADvel ligar')%0A    \n+%0A    def ligar(self):\n %0A   \n@@ -665,1131 +665,209 @@\n     \n-%0A        if self.__bateria is None:%0A            print(f'Status: %7Bstatus%7D, Bateria: Nenhuma')%0A        else:%0A            print(f'Status: %7Bstatus%7D, Bateria: (%7Bself.__bateria.getCarga%7D/%7Bself.__bateria.getCapacidade%7D)')%0A%0A    def usar(self, tempo):%0A        if not self.__ligado:%0A            print('erro: ligue o notebook primeiro')%0A        else:%0A            print(f'Usando por %7Btempo%7D minutos')%0A%0A    def setBateria(self, bateria):%0A        self.__bateria = bateria%0A%0Aclass Bateria:%0A    def __init__(self, capacidade):%0A        self.__capacidade: int = capacidade%0A        self.__carga: int = capacidade # iniciar a carga com a capacidade%0A%0A    def mostrar(self):%0A        print(f'(%7Bself.__carga%7D/%7Bself.__capacidade%7D)')%0A%0A    def getCarga(self):%0A        return self.__carga%0A    %0A    def getCapacidade(self):%0A        return self.__capacidade%0A%0A    def consumir(self, tempo):%0A        if tempo %3E self.__carga: #caso tentar usar mais tempo do que carga%0A            tempo_usado = self.__carga%0A            self.__carga = 0 #descarregou%0A        else:%0A            self.__carga -= tempo # diminui o tempo na carga%0A            return tempo%0A        \n+print(f'Status: %7Bstatus%7D')%0A%0A    def usar(self, tempo):%0A        if not self.__ligado:%0A            print('erro: ligue o notebook primeiro')%0A        else:%0A            print(f'Usando por %7Btempo%7D minutos')%0A\n %0Anot\n@@ -908,28 +908,8 @@\n ook%0A\n-bateria = Bateria()%0A\n note\n@@ -950,34 +950,16 @@\n esligado\n-, Bateria: Nenhuma\n %0Anoteboo\n@@ -1046,268 +1046,22 @@\n g: n\n-%C3%A3o foi poss%C3%ADvel ligar%0Anotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma%0Abateria = Bateria(50) # criando bateria que suporta 50 minutos e come%C3%A7a carregada%0Abateria.mostrar()     # (50/50)%0Anotebook.setBateria(bateria) # coloca a bateria no n\n otebook\n+ ligado\n %0Anot\n@@ -1098,35 +1098,14 @@\n us: \n-Desl\n+L\n igado\n-, Bateria: (50/50)\n %0Anot\n@@ -1133,163 +1133,8 @@\n msg:\n- notebook desligado%0Anotebook.ligar()      # msg: notebook ligado%0Anotebook.mostrar()    # msg: Status: Ligado, Bateria: (50/50)%0Anotebook.usar(30)     # msb:\n  Usa\n@@ -1141,17 +1141,17 @@\n ndo por \n-3\n+1\n 0 minuto\n@@ -1165,153 +1165,18 @@\n ook.\n-mostrar()    # msg: Status: Ligado, Bateria: (20/50)%0Anotebook.usar(30)     # msb: Usando por 20 minutos, notebook descarregou%0Anotebook.mostr\n+deslig\n ar()\n- \n    #\n@@ -1185,176 +1185,22 @@\n sg: \n-Status: Desligado, Bateria: (0/50)%0Anotebook.ligar()      # msg: n%C3%A3o foi poss%C3%ADvel ligar%0Abateria = notebook.rmBateria() # msg: bateria removida%0Abateria.mostrar()     # (0/50)\n+notebook desligado\n",
            "lines": "35"
        },
        {
            "label": "2025-10-22_23-44-16",
            "content": "@@ -1980,32 +1980,52 @@\n riando notebook%0A\n+bateria = Bateria()%0A\n notebook.mostrar\n",
            "lines": "81"
        },
        {
            "label": "2025-10-22_23-45-50",
            "content": "@@ -281,24 +281,29 @@\n ligar')%0A\n+    %0A\n         \n elif not\n@@ -294,18 +294,16 @@\n         \n-el\n if not s\n@@ -1002,18 +1002,16 @@\n getCarga\n-()\n %7D/%7Bself.\n@@ -1033,18 +1033,16 @@\n pacidade\n-()\n %7D)')%0A%0A  \n@@ -1221,533 +1221,63 @@\n     \n-    tempo_usado = self.__bateria.consumir(tempo)%0A        if self.__bateria.getCarga() == 0:%0A            self.desligar()%0A        else:%0A            print(f'Usando por %7Btempo_usado%7D minutos')%0A%0A    def setBateria(self, bateria):%0A        self.__bateria = bateria%0A%0A    def rmBateria(self):%0A        if self.__bateria is None:%0A            print('j%C3%A1 est%C3%A1 sem bateria')%0A            return None%0A        else:%0A            print('bateria removida')%0A            bateria = self.__bateria%0A            self.__bateria = None%0A            return\n+def setBateria(self, bateria):%0A        self.__bateria =\n  bat\n@@ -1842,39 +1842,8 @@\n gou%0A\n-            return tempo_usado%0A\n     \n",
            "lines": "80"
        },
        {
            "label": "2025-10-23_00-14-24",
            "content": "@@ -222,34 +222,32 @@\n bateria.getCarga\n-()\n  == 0:%0A         \n@@ -289,25 +289,18 @@\n         \n-%0A        \n+el\n if not s\n@@ -1162,123 +1162,62 @@\n     \n-    return%0A        %0A        if self.bateria is None:%0A            print('n%C3%A3o foi poss%C3%ADvel ligar')%0A            return\n+else:%0A            print(f'Usando por %7Btempo%7D minutos')\n %0A%0A  \n@@ -1267,25 +1267,24 @@\n (tempo)%0A\n-%0A\n         \n tempo_us\n@@ -1271,37 +1271,26 @@\n po)%0A        \n-tempo_usado =\n+if\n  self.__bate\n@@ -1297,145 +1297,120 @@\n ria.\n-consumir(tempo)%0A        print(f'Usando por %7Btempo_usado%7D minutos')%0A%0A        if self.__bateria.getCarga() == 0:%0A            self.desligar(\n+getCarga() == 0:%0A            self.desligar()%0A        else:%0A            print(f'Usando por %7Btempo_usado%7D minutos'\n )%0A%0A \n",
            "lines": "96"
        },
        {
            "label": "2025-10-23_00-28-37",
            "content": "class Notebook:\n    def __init__(self):\n        self.__ligado: bool = False #True = Ligado False = Desligado\n        self.__bateria: Bateria | None = None\n\n    def ligar(self):\n        if self.__bateria is None or self.__bateria.getCarga() == 0:\n            print('n\u00e3o foi poss\u00edvel ligar')\n        \n        if not self.__ligado: # se n\u00e3o for falso \u00e9 verdadeiro e verdadeiro \u00e9 ligado\n            self.__ligado = True\n            print('notebook ligado')\n        else:\n            print('notebook j\u00e1 est\u00e1 ligado')\n\n    def desligar(self):\n        if self.__ligado: # se for falso \u00e9 falso e falso \u00e9 desligado\n            self.__ligado = False\n            print ('notebook desligado')\n        else:\n            print ('notebook j\u00e1 est\u00e1 desligado')\n\n    def mostrar(self):\n        status = 'Ligado' if self.__ligado else 'Desligado'\n        \n        if self.__bateria is None:\n            print(f'Status: {status}, Bateria: Nenhuma')\n        else:\n            print(f'Status: {status}, Bateria: ({self.__bateria.getCarga()}/{self.__bateria.getCapacidade()})')\n\n    def usar(self, tempo):\n        if not self.__ligado:\n            print('erro: ligue o notebook primeiro')\n            return\n        \n        if self.bateria is None:\n            print('n\u00e3o foi poss\u00edvel ligar')\n            return\n\n        tempo_usado = self.__bateria.consumir(tempo)\n\n        tempo_usado = self.__bateria.consumir(tempo)\n        print(f'Usando por {tempo_usado} minutos')\n\n        if self.__bateria.getCarga() == 0:\n            self.desligar()\n\n    def setBateria(self, bateria):\n        self.__bateria = bateria\n\n    def rmBateria(self):\n        if self.__bateria is None:\n            print('j\u00e1 est\u00e1 sem bateria')\n            return None\n        else:\n            print('bateria removida')\n            bateria = self.__bateria\n            self.__bateria = None\n            return bateria\n\nclass Bateria:\n    def __init__(self, capacidade):\n        self.__capacidade: int = capacidade\n        self.__carga: int = capacidade # iniciar a carga com a capacidade\n\n    def mostrar(self):\n        print(f'({self.__carga}/{self.__capacidade})')\n\n    def getCarga(self):\n        return self.__carga\n    \n    def getCapacidade(self):\n        return self.__capacidade\n\n    def consumir(self, tempo):\n        if tempo > self.__carga: #caso tentar usar mais tempo do que carga\n            tempo_usado = self.__carga\n            self.__carga = 0 #descarregou\n            return tempo_usado\n        else:\n            self.__carga -= tempo # diminui o tempo na carga\n            return tempo\n        \nnotebook = Notebook() # criando notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma\nnotebook.usar(10)     # msg: erro: ligue o notebook primeiro\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: Nenhuma\nbateria = Bateria(50) # criando bateria que suporta 50 minutos e come\u00e7a carregada\nbateria.mostrar()     # (50/50)\nnotebook.setBateria(bateria) # coloca a bateria no notebook\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: (50/50)\nnotebook.usar(10)     # msg: notebook desligado\nnotebook.ligar()      # msg: notebook ligado\nnotebook.mostrar()    # msg: Status: Ligado, Bateria: (50/50)\nnotebook.usar(30)     # msb: Usando por 30 minutos\nnotebook.mostrar()    # msg: Status: Ligado, Bateria: (20/50)\nnotebook.usar(30)     # msb: Usando por 20 minutos, notebook descarregou\nnotebook.mostrar()    # msg: Status: Desligado, Bateria: (0/50)\nnotebook.ligar()      # msg: n\u00e3o foi poss\u00edvel ligar\nbateria = notebook.rmBateria() # msg: bateria removida\nbateria.mostrar()     # (0/50)",
            "lines": "102"
        }
    ]
}